# -*- Mode: Python; coding: utf-8; indent-tabs-mode: nil; tab-width: 4 -*-
### BEGIN LICENSE
# Copyright (C) 2014 Archisman Panigrahi <apandada1@gmail.com>
# Thanks to Adam Whitcroft <adamwhitcroft.com> for Climacons!
# This program is free software: you can redistribute it and/or modify it 
# under the terms of the GNU General Public License version 3, as published 
# by the Free Software Foundation.
# 
# This program is distributed in the hope that it will be useful, but 
# WITHOUT ANY WARRANTY; without even the implied warranties of 
# MERCHANTABILITY, SATISFACTORY QUALITY, or FITNESS FOR A PARTICULAR 
# PURPOSE.  See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License along 
# with this program.  If not, see <http://www.gnu.org/licenses/>.
### END LICENSE

### DO NOT EDIT THIS FILE ###

"""Helpers for an Ubuntu application."""
import logging
import os

from .typhoonconfig import get_data_file
from .Builder import Builder

from locale import gettext as _


def get_builder(builder_file_name):
    """Return a fully-instantiated Gtk.Builder instance from specified UI file.
    
    :param builder_file_name: The name of the builder file, without extension.
        Assumed to be in the 'ui' directory under the data path.
    """
    # Look for the UI file that describes the user interface.
    ui_filename = get_data_file('ui', f'{builder_file_name}.ui')
    if not os.path.exists(ui_filename):
        ui_filename = None

    builder = Builder()
    builder.set_translation_domain('typhoon')
    builder.add_from_file(ui_filename)
    return builder


# Owais Lone: To get quick access to icons and other media files.
def get_media_file(media_file_name):
    media_filename = get_data_file('media', f'{media_file_name}')
    if not os.path.exists(media_filename):
        media_filename = None

    return f"file:///{media_filename}"


class NullHandler(logging.Handler):
    def emit(self, record):
        pass


def set_up_logging(opts):
    # Add a handler to prevent basicConfig
    root = logging.getLogger()
    null_handler = NullHandler()
    root.addHandler(null_handler)

    formatter = logging.Formatter("%(levelname)s:%(name)s: %(funcName)s() '%(message)s'")

    logger = logging.getLogger('typhoon')
    logger_sh = logging.StreamHandler()
    logger_sh.setFormatter(formatter)
    logger.addHandler(logger_sh)

    lib_logger = logging.getLogger('typhoon_lib')
    lib_logger_sh = logging.StreamHandler()
    lib_logger_sh.setFormatter(formatter)
    lib_logger.addHandler(lib_logger_sh)

    # Set the logging level to show debug messages.
    if opts.verbose:
        logger.setLevel(logging.DEBUG)
        logger.debug('Logging enabled')
    if opts.verbose > 1:
        lib_logger.setLevel(logging.DEBUG)


def get_help_uri(page=None):
    """Retrieve the help URI for the application."""
    # Help URI from source tree - default language
    here = os.path.dirname(__file__)
    help_uri = os.path.abspath(os.path.join(here, '..', 'help', 'C'))

    if not os.path.exists(help_uri):
        # Installed, so use GNOME help tree - user's language
        help_uri = 'typhoon'

    # Unspecified page is the index.page
    if page is not None:
        help_uri = f'{help_uri}#{page}'

    return help_uri


def show_uri(parent, link):
    """Open a URI in the default browser."""
    from gi.repository import Gtk  # pylint: disable=E0611
    screen = parent.get_screen()
    Gtk.show_uri(screen, link, Gtk.get_current_event_time())


def alias(alternative_function_name):
    """Attach alternative_function_name(s) to a function."""
    def decorator(function):
        if not hasattr(function, 'aliases'):
            function.aliases = []
        function.aliases.append(alternative_function_name)
        return function
    return decorator
