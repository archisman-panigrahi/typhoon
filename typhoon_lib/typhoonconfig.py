# -*- Mode: Python; coding: utf-8; indent-tabs-mode: nil; tab-width: 4 -*-
### BEGIN LICENSE
# Copyright (C) 2014 Archisman Panigrahi <apandada1@gmail.com>
# Thanks to Adam Whitcroft <adamwhitcroft.com> for Climacons!
# This program is free software: you can redistribute it and/or modify it 
# under the terms of the GNU General Public License version 3, as published 
# by the Free Software Foundation.
# 
# This program is distributed in the hope that it will be useful, but 
# WITHOUT ANY WARRANTY; without even the implied warranties of 
# MERCHANTABILITY, SATISFACTORY QUALITY, or FITNESS FOR A PARTICULAR 
# PURPOSE.  See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License along 
# with this program.  If not, see <http://www.gnu.org/licenses/>.
### END LICENSE

### DO NOT EDIT THIS FILE ###

__all__ = [
    'ProjectPathNotFound',
    'get_data_file',
    'get_data_path',
]

# Where your project will look for your data (for instance, images and UI
# files). By default, this is ../data, relative to your trunk layout.
__typhoon_data_directory__ = '../data/'
__license__ = 'GPL-3'
__version__ = 'VERSION'

import os
import gettext
from gettext import gettext as _

gettext.textdomain('typhoon')


class ProjectPathNotFound(Exception):
    """Raised when the project directory cannot be found."""
    def __init__(self, message="Project path not found."):
        super().__init__(message)


def get_data_file(*path_segments):
    """Get the full path to a data file.

    Returns the path to a file underneath the data directory (as defined by
    `get_data_path`). Equivalent to os.path.join(get_data_path(),
    *path_segments).
    """
    return os.path.join(get_data_path(), *path_segments)


def get_data_path():
    """Retrieve the Typhoon data path.

    This path is by default <typhoon_lib_path>/../data/ in trunk
    and /usr/share/typhoon in an installed version, but this path
    is specified at installation time.
    """
    # Get pathname absolute or relative.
    path = os.path.join(
        os.path.dirname(__file__), __typhoon_data_directory__)

    abs_data_path = os.path.abspath(path)
    if not os.path.exists(abs_data_path):
        raise ProjectPathNotFound(f"Data path not found: {abs_data_path}")

    return abs_data_path


def get_version():
    """Retrieve the version of the application."""
    return __version__
